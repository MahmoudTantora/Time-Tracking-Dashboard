import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:flutter_svg/svg.dart';import 'package:time_tracking_dashboard/domain/entities/time_fram_entity.dart';import 'package:time_tracking_dashboard/presentation/blocs/choose_time_period/choose_time_period_cubit.dart';import 'package:time_tracking_dashboard/presentation/layouts/custom_time_card.dart';import 'package:time_tracking_dashboard/presentation/themes/custom_colors.dart';import 'package:time_tracking_dashboard/presentation/themes/custom_themes.dart';class TimeTrackingListItemWidget extends StatefulWidget {  final String title;  final TimeFrameEntity? timeFrame;  const TimeTrackingListItemWidget({    Key? key,    required this.title,    required this.timeFrame,  }) : super(key: key);  @override  State<TimeTrackingListItemWidget> createState() =>      _TimeTrackingListItemWidgetState();}class _TimeTrackingListItemWidgetState    extends State<TimeTrackingListItemWidget> {  String cardImage = '';  Color cardColor = Colors.white;  String current = '';  String previous = '';  /// set bottom card color and bottom card image according to the card title  getCardStyleFromTimeData() {    if (widget.title == 'Work') {      cardImage = 'icon-work.svg';      cardColor = CustomColors.lightRedWorkColor;    } else if (widget.title == 'Play') {      cardImage = 'icon-play.svg';      cardColor = CustomColors.softBlueColor;    } else if (widget.title == 'Study') {      cardImage = 'icon-study.svg';      cardColor = CustomColors.lightRedStudyColor;    } else if (widget.title == 'Exercise') {      cardImage = 'icon-exercise.svg';      cardColor = CustomColors.limGreenColor;    } else if (widget.title == 'Social') {      cardImage = 'icon-social.svg';      cardColor = CustomColors.violetColor;    } else if (widget.title == 'Self Care') {      cardImage = 'icon-self-care.svg';      cardColor = CustomColors.softOrangeColor;    }    setState(() {});  }  /// get current hours according the the period [Daily - Weekly - Monthly]  Widget currentTimeText() {    return BlocBuilder<ChooseTimePeriodCubit, int>(        builder: (context, tabNumber) {      if (tabNumber == 0) {        current = widget.timeFrame?.dailyPeriod?.current == null            ? ''            : widget.timeFrame?.dailyPeriod?.current.toString() ?? '';      } else if (tabNumber == 1) {        current = widget.timeFrame?.weeklyPeriod?.current == null            ? ''            : widget.timeFrame?.weeklyPeriod?.current.toString() ?? '';      } else {        current = widget.timeFrame?.monthlyPeriod?.current == null            ? ''            : widget.timeFrame?.monthlyPeriod?.current.toString() ?? '';      }      return Text(        '${current}hrs',        style: CustomThemes.cardTitleStyle            .copyWith(fontWeight: FontWeight.w500, fontSize: 36),      );    });  }  /// get previous hours according the the period [Daily - Weekly - Monthly]  Widget previousTimeText() {    return BlocBuilder<ChooseTimePeriodCubit, int>(        builder: (context, tabNumber) {      if (tabNumber == 0) {        previous = widget.timeFrame?.dailyPeriod?.previous == null            ? ''            : widget.timeFrame?.dailyPeriod?.previous.toString() ?? '';      } else if (tabNumber == 1) {        previous = widget.timeFrame?.weeklyPeriod?.previous == null            ? ''            : widget.timeFrame?.weeklyPeriod?.previous.toString() ?? '';      } else {        previous = widget.timeFrame?.monthlyPeriod?.previous == null            ? ''            : widget.timeFrame?.monthlyPeriod?.previous.toString() ?? '';      }      return Text(        '${tabNumber == 0 ? "Yesterday" : tabNumber == 1 ? 'Last Week' : "Last Month"} - ${previous}hrs',        style: CustomThemes.subTitleStyle,      );    });  }  @override  void initState() {    getCardStyleFromTimeData();    super.initState();  }  @override  Widget build(BuildContext context) {    return Padding(      padding: const EdgeInsets.only(bottom: 30.0),      child: CustomTimeCard(        width: MediaQuery.of(context).size.width > 950 ? 200 : double.infinity,        height: MediaQuery.of(context).size.width > 950 ? 143 : 130,        backgroundColor: cardColor,        image: cardImage,        child: Padding(          padding: const EdgeInsets.all(20.0),          child: Column(            mainAxisAlignment: MainAxisAlignment.center,            children: [              Row(                mainAxisAlignment: MainAxisAlignment.spaceBetween,                children: [                  Text(                    widget.title,                    style: MediaQuery.of(context).size.width > 950                        ? CustomThemes.subTitleStyle.copyWith(                            fontWeight: FontWeight.bold, color: Colors.white)                        : CustomThemes.cardTitleStyle                            .copyWith(fontWeight: FontWeight.bold),                  ),                  SvgPicture.asset('assets/svgs/icon-ellipsis.svg')                ],              ),              const SizedBox(height: 10),              MediaQuery.of(context).size.width > 950                  ? Column(                      crossAxisAlignment: CrossAxisAlignment.stretch,                      mainAxisAlignment: MainAxisAlignment.center,                      children: [                        currentTimeText(),                        const SizedBox(height: 5),                        previousTimeText(),                      ],                    )                  : Row(                      mainAxisAlignment: MainAxisAlignment.spaceBetween,                      children: [                        currentTimeText(),                        previousTimeText(),                      ],                    )            ],          ),        ),      ),    );  }}