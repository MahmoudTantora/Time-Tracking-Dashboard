import 'dart:io';import 'package:dartz/dartz.dart';import 'package:time_tracking_dashboard/data/data_sources/remote_data_sources/dashboard_remote_data_source.dart';import 'package:time_tracking_dashboard/domain/entities/app_error.dart';import 'package:time_tracking_dashboard/domain/entities/time_tracking_entity.dart';import 'package:time_tracking_dashboard/domain/repositories/dashboard_repositories.dart';class DashboardRepositoryImpl extends DashboardRepository {  DashboardRemoteDataSource dashboardRemoteDataSource;  DashboardRepositoryImpl({required this.dashboardRemoteDataSource});  @override  Future<Either<AppError, List<TimeTrackingEntity>>>      fetchTimeTrackingData() async {    try {      final timeTrackingData =          await dashboardRemoteDataSource.fetchTimeTrackingData();      //the request fetch data successfully      return Right(timeTrackingData);    } on SocketException {      //there is a problem in the internet connection      return const Left(AppError(AppErrorType.network));    } on Exception {      //there is a problem in the server      return const Left(AppError(AppErrorType.api));    }  }}